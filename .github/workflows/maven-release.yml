name: Maven Deploy

on:
  workflow_dispatch: # Manual trigger without inputs

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.9.6

      - name: Build with Maven
        run: mvn -B package

      - name: Set up JDK
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '17'
          server-id: ossrh  # Must match server ID in settings.xml/pom.xml
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          # The private key is not required as a standard environment variable
          gpg-private-key: ${{ secrets.GPG_SECRET_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Configure GPG and cache passphrase
        env:
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "::group::Initial GPG state"
          echo "=== Checking GPG version ==="
          gpg --version | head -n 1
          
          echo "=== Listing secret keys ==="
          gpg --list-secret-keys
          echo "::endgroup::"
          
          echo "::group::Configuring GPG agent"
          echo "=== Creating gpg-agent.conf ==="
          cat > ~/.gnupg/gpg-agent.conf <<EOF
          allow-loopback-pinentry
          default-cache-ttl 7200
          max-cache-ttl 7200
          EOF
          
          echo "=== Contents of gpg-agent.conf ==="
          cat ~/.gnupg/gpg-agent.conf

          echo "=== Checking if gpg.conf exists ==="
          if [ -f ~/.gnupg/gpg.conf ]; then
            echo "gpg.conf exists:"
            cat ~/.gnupg/gpg.conf
          else
            echo "gpg.conf does not exist"
          fi
          
          echo "=== Restarting GPG agent ==="
          gpgconf --kill gpg-agent
          gpg-connect-agent /bye
          
          echo "=== Checking GPG agent status ==="
          gpg-connect-agent 'keyinfo --list' /bye
          echo "::endgroup::"
          
          echo "::group::Test signing to cache passphrase"
          echo "=== Performing test signing (using passphrase-fd) ==="
          echo "test" | gpg --pinentry-mode loopback --passphrase-fd 0 --batch --yes --armor --detach-sign --output test.sig <<< "${MAVEN_GPG_PASSPHRASE}"
          
          if [ $? -eq 0 ]; then
            echo "Test signing successful - passphrase is now cached in agent"
            rm -f test.sig
          else
            echo "Test signing failed!"
            exit 1
          fi
          echo "::endgroup::"
          
          echo "::group::Verify GPG can sign without explicit passphrase"
          echo "=== Testing if agent has cached passphrase ==="
          echo "test2" | gpg --pinentry-mode loopback --batch --yes --armor --detach-sign --output test2.sig
          
          if [ $? -eq 0 ]; then
            echo "Signing without passphrase works - agent has it cached!"
            rm -f test2.sig
          else
            echo "Signing without passphrase failed - agent may not have cached it"
          fi
          echo "::endgroup::"

      - name: Deploy to Maven Central
        env:
          MAVEN_USERNAME: ${{ secrets.AEROSPIKE_SA_CICD_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.AEROSPIKE_SA_CICD_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_TTY: "" # Tell GPG not to use a terminal
        # Use batch mode: no interactive prompts, cleaner logs
        run: mvn --batch-mode clean deploy
